\frametitle{Pseudo-Random Number Generation}
\begin{itemize}
        \item ``Random'' numbers generated by a computer only approximate a stochastic process. Sequence generated deterministically from an initial seed.
        \item How do we seed an RNG so it is reproducible?  And how do we do it in parallel?
        \item In the initial Python multiprocessing example, we seeded a single RNG that can be passed to functions: best-practice (vs. global RNG) outside of parallel environments.
        \item But in parallel, the RNG is passed to each child process so the draws are the same on each child process.
        \item Unlikely this is what you want; would be more efficient to draw the random numbers before the parallel process and pass those draws to the child processes.
        \item Answer is to spawn a \verb|SeedSequence| and child seeds (equal to number of child processes) from it and RNGs from those, then pass those RNGs to the child processes.
        \item More on the hazards and best practices of PRNG in parallel (\href{https://blog.scientific-python.org/numpy/numpy-rng/}{link 1}, \href{https://numpy.org/doc/stable/reference/random/parallel.html}{link 2}).
        \newpage
        \item In Julia, the ability to control how you send variables to subprocesses lets you control whether or not the draws are the same in subprocesses.\\
        \begin{jllisting}
using Distributed; addprocs(2)

@everywhere seed = randn()
@info "Same" seed_one=@fetchfrom(2, seed) seed_two=@fetchfrom(3, seed)

@info "Different" seeds = pmap(1:5) do i
    i => (procid = myid(), x = randn())
end
        \end{jllisting}
    \end{itemize}
